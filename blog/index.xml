<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Ranting about fantasies</title>
    <link>https://www.nolife4life.org/blog/</link>
    <description>Recent content in Blog on Ranting about fantasies</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Fri, 23 Apr 2021 16:59:35 +0300</lastBuildDate><atom:link href="https://www.nolife4life.org/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Proper Ambassador Behind Cloudfront</title>
      <link>https://www.nolife4life.org/blog/proper-ambassador-behind-cloudfront/</link>
      <pubDate>Fri, 23 Apr 2021 16:59:35 +0300</pubDate>
      
      <guid>https://www.nolife4life.org/blog/proper-ambassador-behind-cloudfront/</guid>
      <description>Quick walkthrough on deploying Ambassador (or any other Ingress Controller) behind WAF filtered CloudFront distribution.
Requirements:
 EKS cluster, with proper configuration. Helm deployed Ambassador. Working Terraform installation.  Standard way of setuping Load Balancer backed CloudFront Distribution looks like this:
 This setup works just fine, if you are not concerned about traffic hitting your Load Balancer directly.
Here you can find terraform files that generate CloudFront distribution for listed Domains.</description>
    </item>
    
    <item>
      <title>Fun with flags</title>
      <link>https://www.nolife4life.org/blog/fun-with-flags/</link>
      <pubDate>Fri, 11 Oct 2013 12:00:00 +0200</pubDate>
      
      <guid>https://www.nolife4life.org/blog/fun-with-flags/</guid>
      <description>Every now and then I catch myself in such situation:
enum Alignment { Left, Center, Right, Justify, }; enum Anchor { Top, Right, Bottom, Left, }; void SetAnchor(byte anchor); void SetAlignment(byte alignment); This just begs for errors. So what can we do here? Obvious answer &amp;ndash; lets make a class, with overloaded operator| and voilia, we just created a type safe flag implementation. This time I wanted to do something different, in a way, that performance of these flags would match (in some extent) natural binary operations.</description>
    </item>
    
    <item>
      <title>Tackling Functions</title>
      <link>https://www.nolife4life.org/blog/tackling-functions/</link>
      <pubDate>Mon, 26 Aug 2013 21:53:00 +0200</pubDate>
      
      <guid>https://www.nolife4life.org/blog/tackling-functions/</guid>
      <description>Recently I&amp;rsquo;ve found this post, which describes a better implementation of std::functions. Since I had severe problems with understanding how this code works, I decided to write down my adventures in it step by step.
Syntax The code in question provides an alternate implementation of std::function, so at least it should make such code work:
int foo(int a) {}; func::function&amp;lt;int(int)&amp;gt; f(foo); f(5); I started analyzing this code by searching for a definition of function.</description>
    </item>
    
  </channel>
</rss>
